// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id               String              @id @default(uuid())
  email            String              @unique
  name             String
  avatar           String?
  refreshToken     String              @unique
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  posts            Post[]
  readApplications RescueApplication[]
  drafts           Draft[]
}

model RescueApplication {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  firstName       String
  lastName        String
  email           String
  age             Int
  location        String   @default("Unknown")
  parentFirstName String?
  parentLastName  String?
  parentEmail     String?

  hasCage            Boolean
  cageType           String?
  cageImage          String?
  hasChildren        Boolean
  hasAllergies       Boolean
  hasPets            Boolean
  petTypes           String[]
  hasChinchillaVet   Boolean
  hasChinchilla      Boolean
  chinchillaName     String?
  chinchillaAge      Int?
  chinchillaGender   Gender?
  chinchillaFriendly Boolean?
  willQuarantine     Boolean?

  ownedChinchillas      Boolean
  ownedChinchillasCount Int?

  surrenderedPet       Boolean
  surrenderedPetReason String?

  whyChinchilla String?

  archived Boolean @default(false)

  readBy User[]
}

model Post {
  id          String   @id @default(cuid())
  title       String
  content     String
  image       String?
  tags        String[]
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  drafts      Draft[]
}

model Draft {
  id          String   @id @default(cuid())
  title       String?
  content     String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  post        Post?    @relation(fields: [postId], references: [id])
  postId      String?
}

model Chinchilla {
  id          Int          @id @default(autoincrement())
  name        String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  age         Int
  description String
  color       String
  gender      Gender
  friendly    Boolean
  photos      String[]
  bondedWith  Chinchilla[] @relation("Bonding")
  bondedTo    Chinchilla?  @relation("Bonding", fields: [bondedToId], references: [id])
  bondedToId  Int?
}

enum Gender {
  MALE
  FEMALE
}
