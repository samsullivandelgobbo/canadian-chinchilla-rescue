// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  name         String
  avatar       String?
  refreshToken String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  posts        Post[]
}

model RescueApplication {
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  firstName        String
  lastName         String
  email            String
  age              Int
  parentFirstName  String?
  parentLastName   String?
  parentEmail      String?
  hasChildren      Boolean
  hasPets          Boolean
  petTypes         String[]
  hasChinchilla    Boolean
  chinchillaGender Gender?
  chinchillaAge    Int?

  previousChinchilla    Boolean
  previousChinchillaAge Int?
}

model Post {
  id          Int      @id @default(autoincrement())
  title       String
  content     String
  image       String?
  category    String
  description String
  slug        String   @unique
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
}

model Chinchilla {
  id          Int          @id @default(autoincrement())
  name        String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  age         Int
  description String
  color       String
  gender      Gender
  friendly    Boolean
  photos      String[]
  bondedWith  Chinchilla[] @relation("Bonding")
  bondedTo    Chinchilla?  @relation("Bonding", fields: [bondedToId], references: [id])
  bondedToId  Int?
}

enum Gender {
  MALE
  FEMALE
}

// model Product {
//   id        Int      @id @default(autoincrement())
//   name      String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   stripeId  String
//   quantity  Int
//   price     Int
//   category  String
//   photos    String[]
// }
